clear
clc
%Create georeference object for the grid
R = georasterref;
R.RasterSize = [150,360];
R.Latlim = [-60, 90];
R.Lonlim = [-180,180];
R.ColumnsStartFrom = 'north';
R.RowsStartFrom = 'west';
GWS = NaN(150,360,456);
SM = NaN(150,360,456);
grace = dir('stf_d_GRACE_REC_v03_JPL_MSWEP_monthly_1X1.nc');
CLM =dir('stf_CLM10_M.A_AccumSM_Anomaly(2004-09)rev.nc');
finfo = ncinfo(grace.name); 
    ncid = netcdf.open(grace.name); %open the netCDF file 
    lon = netcdf.getVar(ncid,0); %extract latitude variable
    lat = netcdf.getVar(ncid,1); %extract longitude variable
    time = netcdf.getVar(ncid,2); %extract time
    start = [0 0 0]; count = [360 150 length(time)]; 
    gw = netcdf.getVar(ncid,3,start,count);
    finfo1 = ncinfo(CLM.name); 
    ncid1 = netcdf.open(CLM.name); %open the netCDF file 
    lon1 = netcdf.getVar(ncid1,1); %extract latitude variable
    lat1 = netcdf.getVar(ncid1,2); %extract longitude variable
    time1 = netcdf.getVar(ncid1,0); %extract time
    start1 = [0 0 0]; count1 = [360 150 length(time1)]; 
    soil = netcdf.getVar(ncid1,3,start1,count1);%extract PET variable
count =1;
    for i = 1:length(time)
        sub(1:360,1:150) = gw(:,:,i);
        sub1(1:360,1:150) = soil(:,:,i); 
        for ii = 1:150
            sub(sub(:,ii) < -1000, ii) = NaN;
            sub1(sub1(:,ii) < -1e10-4, ii) = NaN;
%             sub1(sub1(:,ii) > 1000, ii) = NaN;%Make missing values NaN

        end
        GWS(:,:,count) = sub';
        SM(:,:,count) = sub1';  
%flip the data so dimensions are lat x lon x time
        count = count + 1; 
        clear sub sub1
    end
save Grace_rev03_new112re.mat GWS;
save soilmoist112re.mat SM;

%%
%Create georeference object for the grid
R = georasterref;
R.RasterSize = [150,360];
R.Latlim = [-60, 90];
R.Lonlim = [-180,180];
R.ColumnsStartFrom = 'north';
R.RowsStartFrom = 'west';
grace = load('Grace_rev03_new112re.mat');
grace = grace.GWS;
soil = load('soilmoist112re.mat');
soil = soil.SM;
wsDatar = [];
ws = [];
wsD = []; wsDe = [];
petCount = 1;
droughtindexpara = NaN(150,360,456);
droughtindexNonpara = NaN(150,360,456);

    
    latlon = xlsread('cords_World.csv');counter = 1;
    for j = 1:length(latlon)
        j
        tic
         t = 1:456;  
    %Find the grid cell (row, col) of my stations  
%     for i = 1979:2016
%         for jk= 1:12 
       
%         k = i;
%          w = 1:12;
%           wsDatar(2+counter,1)= k;  
       
            
             lat = latlon(j,end-1);
              lon = latlon(j,end);
%               lon = lon+360;
%      lat = 82.5;
%     lon = 81.5;
%           wsDatar(2+counter,2)= jk;
              wsDatar(1,3) = lat(1,1);
                wsDatar(2,3) = lon(1,1);
%             ws(2+counter,1)= k;
%           ws(2+counter,2)= j;
              ws(1,3) = lat(1,1);
                ws(2,3) = lon(1,1);
%                 wsD(2+counter,2)= jk;
                wsD(1,j+2) = lat(1,1);
                wsD(2,j+2) = lon(1,1);
%                 wsDe(2+counter,2)= jk;
                wsDe(1,j+2) = lat(1,1);
                wsDe(2,j+2) = lon(1,1);
          for jj = 1:length(t)
                y = t(1,jj);
                [row,col] = latlon2pix(R,lat,lon); 
                row = round(row); col = round(col); 
%                 row = 8; col = 114;  
                wsDatar(jj+2,3) = grace(row,col,jj);
            ws(jj+2,3) = soil(row,col,jj);
         end
           counter = counter+1;    
         
        d(:,1) = wsDatar(3:end,3);
        d(:,2) = ws(3:end,3);
        pos = isnan(d(:,1:end));
        d(pos,1:end) = 1000;
        if d(:,1:end) ~= 1000
            
%         PET(:,:,petCount) = sub'; 
%         petCount = petCount + 1;    
   
%Grace vector
dp=d(:,1);
%Monthly soil moisture vector
ds=d(:,2);
nm=length(dp);

% Specify time scale (e.g., 6-month SPI or MSDI)

sc=3;

% Initialize matrices of drought indices

SPI=zeros(nm,1);SSI=zeros(nm,1);MSDIe=zeros(nm,1);MSDIp=zeros(nm,1);

% Compute empirical SPI and SSI

SPI(1:sc-1,1)=nan;
SPI(sc:end,1)=SPIComp(dp,sc);

SSI(1:sc-1,1)=nan;
SSI(sc:end,1)=SPIComp(ds,sc);

% Compute empirical MSDI

MSDIe(1:sc-1,1)=nan;
MSDIe(sc:end,1)=Dat2EmpMSDI(dp,ds,sc);

% Compute parametric (copula-based) MSDI (change copula family if needed)

MSDIp(1:sc-1,1)=nan;
MSDIp(sc:end,1)=Dat2CopMSDI(dp,ds,sc,'Frank');
wsData = wsDatar(3:end,1);


for ii = 1:length(t)
%           y = t(1,jj);
%          [row,col] = latlon2pix(R,lat,lon); 
%          row = round(row); col = round(col);
        MSDIp(pos,1) = NaN;
        MSDIe(pos,1) = NaN;
        droughtindexpara(row,col,ii)= MSDIp(ii,1);
        droughtindexNonpara(row,col,ii)= MSDIe(ii,1);
        wsD(2+ii,2+j) = droughtindexpara(row,col,ii);
        wsDe(2+ii,2+j) = droughtindexNonpara(row,col,ii);
%         petCount = petCount + 1;
end


        else
           for ii = 1:length(t) 
            wsD(2+ii,2+j) = NaN;
            wsDe(2+ii,2+j) = NaN;
           end
        end
        clear  MSDIp MSDIe SSI ds dp d SPI pos 
%         end  
      
%        end
  clear p counter
  toc
       end

  

    %             clear wsData sub row col lat lon sub1

% csvwrite('Grace_for drought_index.csv',wsDatar);
save DroughtIndexPara12.mat droughtindexpara
save DroughtIndexNonPara12.mat droughtindexNonpara
%%
numrow = 150;
numcol = 360;
numdate = 456;
lat2 = lat1(:,1);
lon2 = lon1(:,1);
time2 =  time(:,1);
DroughtMDSIp = droughtindexpara;
%Open the file
ncid = netcdf.create('para.nc','NC_WRITE');
%Define the dimensions
dimidlat = netcdf.defDim(ncid,'latitude',numrow);
dimidlon = netcdf.defDim(ncid,'longitude',numcol);
dimidt = netcdf.defDim(ncid,'time',numdate);
%Define IDs for the dimension variables (pressure,time,latitude,...)
latitude_ID=netcdf.defVar(ncid,'latitude','double',[dimidlat]);
longitude_ID=netcdf.defVar(ncid,'longitude','double',[dimidlon]);
date_ID=netcdf.defVar(ncid,'time','double',[dimidt]);
%Define the main variable ()
MSDIp_ID = netcdf.defVar(ncid,'test','double',[dimidt dimidlat dimidlon]);
%density_ID = netcdf.defVar(ncid,'density','double',netcdf.getConstant('NC_UNLIMITED'));
%We are done defining the NetCdf
netcdf.endDef(ncid);
%Then store the dimension variables in
netcdf.putVar(ncid,latitude_ID,lat2);
netcdf.putVar(ncid,longitude_ID,lon2);
netcdf.putVar(ncid,date_ID,time);
%Then store my main variable
netcdf.putVar(ncid,MSDIp_ID,DroughtMDSIp);
%We're done, close the netcdf
netcdf.close(ncid);
ncid2 = netcdf.open('para.nc','NC_NOWRITE');
data_copy = netcdf.getVar(ncid2,0);
if isequal(MSDIp_ID,data_copy)
      disp('Data match');
else
      disp('Data mis-match');
end
